import discord
from discord.ext import commands
import random

class Roleplay(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.missoes = {}  # missao atual por usu√°rio
        self.respeito = {}  # respeito por usu√°rio

        self.missoes_disponiveis = [
            "Configurar ambiente de desenvolvimento Python",
            "Criar um bot simples que responda a comandos",
            "Adicionar comando de sauda√ß√£o ao bot",
            "Implementar comando de ajuda",
            "Fazer o bot responder mensagens espec√≠ficas",
            "Adicionar sistema de XP para usu√°rios",
            "Criar comando para mostrar ranking de XP",
            "Implementar armazenamento dos dados dos usu√°rios",
            "Adicionar comando de perfil para usu√°rios",
            "Criar comando para mostrar saldo virtual",
            "Implementar sistema de economia simples",
            "Criar comando de trabalhar para ganhar moedas",
            "Adicionar comando de roubar moedas (com riscos)",
            "Criar sistema de loja virtual no bot",
            "Adicionar comando para comprar itens na loja",
            "Implementar invent√°rio para usu√°rios",
            "Adicionar comando para vender itens do invent√°rio",
            "Criar sistema de apostas simples (cara ou coroa)",
            "Implementar comando de dados aleat√≥rios",
            "Adicionar comando de piadas aleat√≥rias",
            "Criar comando para enviar memes",
            "Implementar sistema de n√≠veis e experi√™ncia",
            "Adicionar comando para ver o n√≠vel atual",
            "Criar comando para miss√£o di√°ria (daily)",
            "Implementar comando para leaderboard geral",
            "Adicionar suporte para m√∫ltiplos idiomas",
            "Criar sistema de tickets de suporte",
            "Implementar comando para abrir ticket",
            "Criar comando para fechar ticket",
            "Adicionar comando de avisos para modera√ß√£o",
            "Implementar comando para banir usu√°rios",
            "Adicionar comando para expulsar usu√°rios",
            "Criar sistema de logs para a√ß√µes de modera√ß√£o",
            "Implementar comando de mute e unmute",
            "Adicionar comando para limpar mensagens",
            "Criar comandos divertidos (rps, adivinha√ß√£o)",
            "Implementar comandos para mini-jogos",
            "Adicionar comando para contar hist√≥rias aleat√≥rias",
            "Criar sistema de eventos semanais",
            "Implementar sistema de conquistas para usu√°rios",
            "Adicionar comando para ver conquistas",
            "Criar sistema de n√≠veis de programador (respeito)",
            "Implementar comando !respeito para ver status",
            "Adicionar comando !rankprogramador para ranking",
            "Criar comando para mostrar informa√ß√µes do bot",
            "Implementar deploy do bot para um servidor online",
            "Adicionar comando para reiniciar o bot",
            "Criar sistema de backup autom√°tico dos dados",
            "Implementar documenta√ß√£o autom√°tica dos comandos",
            "Adicionar comando para feedback dos usu√°rios",
            "Criar comando para sugest√µes de melhorias"
        ]

    @commands.command(name='missao')
    async def missao(self, ctx):
        user_id = ctx.author.id
        if user_id in self.missoes:
            await ctx.reply(f"üó∫Ô∏è Sua miss√£o atual √©: **{self.missoes[user_id]}**", mention_author=False)
        else:
            await ctx.reply("‚ùå Voc√™ n√£o tem nenhuma miss√£o ativa. Use !aceitar para receber uma miss√£o.", mention_author=False)

    @commands.command(name='aceitar')
    async def aceitar_missao(self, ctx):
        user_id = ctx.author.id
        if user_id in self.missoes:
            await ctx.reply("‚ùå Voc√™ j√° tem uma miss√£o ativa.", mention_author=False)
            return

        # Pega uma miss√£o aleat√≥ria que o usu√°rio ainda n√£o fez (pode ser expandido pra banco)
        missao = random.choice(self.missoes_disponiveis)
        self.missoes[user_id] = missao
        # D√° um respeito inicial se n√£o tiver
        if user_id not in self.respeito:
            self.respeito[user_id] = 0
        await ctx.reply(f"‚úÖ Miss√£o aceita: **{missao}**", mention_author=False)

    @commands.command(name='desistir_missao')
    async def desistir_missao(self, ctx):
        user_id = ctx.author.id
        if user_id not in self.missoes:
            await ctx.reply("‚ùå Voc√™ n√£o tem miss√£o para desistir.", mention_author=False)
            return
        del self.missoes[user_id]
        await ctx.reply("‚ö†Ô∏è Voc√™ desistiu da sua miss√£o atual.", mention_author=False)

    @commands.command(name='completar')
    async def completar_missao(self, ctx):
        """Comando para o usu√°rio completar a miss√£o atual."""
        user_id = ctx.author.id
        if user_id not in self.missoes:
            await ctx.reply("‚ùå Voc√™ n√£o tem nenhuma miss√£o ativa para completar.", mention_author=False)
            return

        missao = self.missoes.pop(user_id)
        # Incrementa respeito do usu√°rio ao completar a miss√£o
        self.respeito[user_id] = self.respeito.get(user_id, 0) + 10  # +10 respeito por miss√£o

        await ctx.reply(f"üéâ Parab√©ns! Voc√™ completou a miss√£o: **{missao}**\nVoc√™ ganhou 10 pontos de Respeito de Programador!", mention_author=False)

    @commands.command(name='respeito')
    async def respeito(self, ctx):
        user_id = ctx.author.id
        pontos = self.respeito.get(user_id, 0)
        await ctx.reply(f"üèÜ Voc√™ tem **{pontos}** pontos de Respeito de Programador.", mention_author=False)

    @commands.command(name='rankprogramador')
    async def rankprogramador(self, ctx):
        # Ordena os usu√°rios pelo respeito (decrescente)
        ranking = sorted(self.respeito.items(), key=lambda x: x[1], reverse=True)[:5]
        if not ranking:
            await ctx.reply("‚ùå Nenhum programador no ranking ainda.", mention_author=False)
            return

        texto = "ü•á **Ranking dos 5 Programadores com mais Respeito:**\n\n"
        for i, (user_id, pontos) in enumerate(ranking, start=1):
            member = ctx.guild.get_member(user_id)
            nome = member.display_name if member else f"Usu√°rio ID {user_id}"
            texto += f"**{i}¬∫** - {nome} ‚Äî {pontos} pontos\n"

        await ctx.reply(texto, mention_author=False)

async def setup(bot):
    await bot.add_cog(Roleplay(bot))
